
Pascal
======

.. raw:: html

   <p>

.. raw:: html

   <div align="right">

Massimo Nocentini February 4, 2018: exponential P

.. raw:: html

   </div>

.. raw:: html

   </p>

.. raw:: html

   <div align="center">

Abstract Exponential :math:`\mathcal{P}`, according to Paul Barryâ€™s
book.

.. raw:: html

   </div>

.. code:: ipython3

    from sympy import *
    from sympy.abc import n, i, N, x, lamda, phi, z, j, r, k, a, alpha
    
    init_printing()

.. code:: ipython3

    %run ../../src/matrix_functions.py
    %run ../../src/sequences.py

--------------

.. code:: ipython3

    m = 10

.. code:: ipython3

    eP = Matrix(m, m, lambda n,k: factorial(n)*binomial(n,k)/factorial(k))
    eP




.. math::

    \left[\begin{matrix}1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\2 & 4 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\6 & 18 & 9 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\24 & 96 & 72 & 16 & 1 & 0 & 0 & 0 & 0 & 0\\120 & 600 & 600 & 200 & 25 & 1 & 0 & 0 & 0 & 0\\720 & 4320 & 5400 & 2400 & 450 & 36 & 1 & 0 & 0 & 0\\5040 & 35280 & 52920 & 29400 & 7350 & 882 & 49 & 1 & 0 & 0\\40320 & 322560 & 564480 & 376320 & 117600 & 18816 & 1568 & 64 & 1 & 0\\362880 & 3265920 & 6531840 & 5080320 & 1905120 & 381024 & 42336 & 2592 & 81 & 1\end{matrix}\right]



.. code:: ipython3

    eP_pm = production_matrix(eP)
    eP_pm




.. math::

    \left[\begin{matrix}1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 3 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 4 & 5 & 1 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 9 & 7 & 1 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 16 & 9 & 1 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 25 & 11 & 1 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 36 & 13 & 1 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 49 & 15 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 64 & 17\end{matrix}\right]



.. code:: ipython3

    eP_epm = production_matrix(eP, exp=True)
    eP_epm




.. math::

    \left[\begin{matrix}1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 3 & 2 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 2 & 5 & 3 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 3 & 7 & 4 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 4 & 9 & 5 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 5 & 11 & 6 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 6 & 13 & 7 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 7 & 15 & 8\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 8 & 17\end{matrix}\right]



.. code:: ipython3

    is_ordinary_RA(eP)




.. parsed-literal::

    False



.. code:: ipython3

    is_exponential_RA(eP, show_witness=True)




.. parsed-literal::

    (True,
     {0: [3, 5, 7, 9, 11, 13, 15, 17],
      1: [2, 3, 4, 5, 6, 7, 8],
      2: [0, 0, 0, 0, 0, 0],
      3: [0, 0, 0, 0, 0],
      4: [0, 0, 0, 0],
      5: [0, 0, 0],
      6: [0, 0]},
     {0: {k[0]: -2},
      1: {k[1]: -1},
      2: {k[2]: 0},
      3: {k[3]: 0},
      4: {k[4]: 0},
      5: {k[5]: 0},
      6: {k[6]: 0}})



.. code:: ipython3

    F = Matrix(m, m, diagonal_func_matrix(factorial))

.. code:: ipython3

    F




.. math::

    \left[\begin{matrix}1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 2 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 6 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 24 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 120 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 720 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 5040 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 40320 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 362880\end{matrix}\right]



.. code:: ipython3

    F_inv = F**(-1)
    F_inv




.. math::

    \left[\begin{matrix}1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & \frac{1}{2} & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & \frac{1}{6} & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & \frac{1}{24} & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & \frac{1}{120} & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & \frac{1}{720} & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & \frac{1}{5040} & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & \frac{1}{40320} & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & \frac{1}{362880}\end{matrix}\right]



In order to factorize ``eP`` as ``F U F^{-1}``, for some matrix ``U``

.. code:: ipython3

    B = F_inv * eP * F
    B




.. math::

    \left[\begin{matrix}1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 2 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 3 & 3 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 4 & 6 & 4 & 1 & 0 & 0 & 0 & 0 & 0\\1 & 5 & 10 & 10 & 5 & 1 & 0 & 0 & 0 & 0\\1 & 6 & 15 & 20 & 15 & 6 & 1 & 0 & 0 & 0\\1 & 7 & 21 & 35 & 35 & 21 & 7 & 1 & 0 & 0\\1 & 8 & 28 & 56 & 70 & 56 & 28 & 8 & 1 & 0\\1 & 9 & 36 & 84 & 126 & 126 & 84 & 36 & 9 & 1\end{matrix}\right]



.. code:: ipython3

    production_matrix(eP)




.. math::

    \left[\begin{matrix}1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 3 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 4 & 5 & 1 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 9 & 7 & 1 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 16 & 9 & 1 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 25 & 11 & 1 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 36 & 13 & 1 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 49 & 15 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 64 & 17\end{matrix}\right]



.. code:: ipython3

    U = Matrix(m, m, rows_shift_matrix(by=1))
    U




.. math::

    \left[\begin{matrix}0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\end{matrix}\right]



.. code:: ipython3

    F_inv * U * F




.. math::

    \left[\begin{matrix}0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 2 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 3 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 4 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 5 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 6 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 7 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 8 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 9\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\end{matrix}\right]



.. code:: ipython3

    F_inv * U * F * B




.. math::

    \left[\begin{matrix}1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\2 & 4 & 2 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\3 & 9 & 9 & 3 & 0 & 0 & 0 & 0 & 0 & 0\\4 & 16 & 24 & 16 & 4 & 0 & 0 & 0 & 0 & 0\\5 & 25 & 50 & 50 & 25 & 5 & 0 & 0 & 0 & 0\\6 & 36 & 90 & 120 & 90 & 36 & 6 & 0 & 0 & 0\\7 & 49 & 147 & 245 & 245 & 147 & 49 & 7 & 0 & 0\\8 & 64 & 224 & 448 & 560 & 448 & 224 & 64 & 8 & 0\\9 & 81 & 324 & 756 & 1134 & 1134 & 756 & 324 & 81 & 9\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\end{matrix}\right]



.. code:: ipython3

    B**(-1) * F_inv * U * F * B




.. math::

    \left[\begin{matrix}1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 3 & 2 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 2 & 5 & 3 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 3 & 7 & 4 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 4 & 9 & 5 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 5 & 11 & 6 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 6 & 13 & 7 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 7 & 15 & 8 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 8 & 17 & 9\\-10 & -100 & -450 & -1200 & -2100 & -2520 & -2100 & -1200 & -441 & -81\end{matrix}\right]



.. code:: ipython3

    F * B**(-1) * F_inv * U * F * B * F_inv




.. math::

    \left[\begin{matrix}1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 3 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 4 & 5 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 9 & 7 & 1 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 16 & 9 & 1 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 25 & 11 & 1 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 36 & 13 & 1 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 49 & 15 & 1 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 64 & 17 & 1\\-3628800 & -36288000 & -81648000 & -72576000 & -31752000 & -7620480 & -1058400 & -86400 & -3969 & -81\end{matrix}\right]



--------------

.. code:: ipython3

    P = Matrix(m, m, binomial)

.. code:: ipython3

    P_bar = Matrix(m, m, lambda i, j: binomial(i, j) if j < i else 0)
    P_bar




.. math::

    \left[\begin{matrix}0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 2 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 3 & 3 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 4 & 6 & 4 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 5 & 10 & 10 & 5 & 0 & 0 & 0 & 0 & 0\\1 & 6 & 15 & 20 & 15 & 6 & 0 & 0 & 0 & 0\\1 & 7 & 21 & 35 & 35 & 21 & 7 & 0 & 0 & 0\\1 & 8 & 28 & 56 & 70 & 56 & 28 & 8 & 0 & 0\\1 & 9 & 36 & 84 & 126 & 126 & 84 & 36 & 9 & 0\end{matrix}\right]



.. code:: ipython3

    production_matrix(P_bar[1:,:-1], exp=False)




.. math::

    \left[\begin{matrix}1 & 2 & 0 & 0 & 0 & 0 & 0 & 0\\0 & \frac{1}{2} & \frac{3}{2} & 0 & 0 & 0 & 0 & 0\\0 & \frac{1}{6} & \frac{1}{2} & \frac{4}{3} & 0 & 0 & 0 & 0\\0 & 0 & \frac{1}{4} & \frac{1}{2} & \frac{5}{4} & 0 & 0 & 0\\0 & - \frac{1}{30} & 0 & \frac{1}{3} & \frac{1}{2} & \frac{6}{5} & 0 & 0\\0 & 0 & - \frac{1}{12} & 0 & \frac{5}{12} & \frac{1}{2} & \frac{7}{6} & 0\\0 & \frac{1}{42} & 0 & - \frac{1}{6} & 0 & \frac{1}{2} & \frac{1}{2} & \frac{8}{7}\\0 & 0 & \frac{1}{12} & 0 & - \frac{7}{24} & 0 & \frac{7}{12} & \frac{1}{2}\end{matrix}\right]



.. code:: ipython3

    production_matrix(P_bar[1:,:-1], exp=True)




.. math::

    \left[\begin{matrix}1 & 2 & 0 & 0 & 0 & 0 & 0 & 0\\0 & \frac{1}{2} & 3 & 0 & 0 & 0 & 0 & 0\\0 & \frac{1}{12} & \frac{1}{2} & 4 & 0 & 0 & 0 & 0\\0 & 0 & \frac{1}{12} & \frac{1}{2} & 5 & 0 & 0 & 0\\0 & - \frac{1}{720} & 0 & \frac{1}{12} & \frac{1}{2} & 6 & 0 & 0\\0 & 0 & - \frac{1}{720} & 0 & \frac{1}{12} & \frac{1}{2} & 7 & 0\\0 & \frac{1}{30240} & 0 & - \frac{1}{720} & 0 & \frac{1}{12} & \frac{1}{2} & 8\\0 & 0 & \frac{1}{30240} & 0 & - \frac{1}{720} & 0 & \frac{1}{12} & \frac{1}{2}\end{matrix}\right]



.. code:: ipython3

    is_exponential_RA(P_bar[1:,:-1], show_witness=True)




.. parsed-literal::

    (True,
     {0: [1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2],
      1: [1/12, 1/12, 1/12, 1/12, 1/12, 1/12],
      2: [0, 0, 0, 0, 0],
      3: [-1/720, -1/720, -1/720, -1/720],
      4: [0, 0, 0],
      5: [1/30240, 1/30240]},
     {0: {k[0]: 0},
      1: {k[1]: 0},
      2: {k[2]: 0},
      3: {k[3]: 0},
      4: {k[4]: 0},
      5: {k[5]: 0}})



.. code:: ipython3

    j=3
    (P_bar**j).applyfunc(lambda i: i/factorial(j))




.. math::

    \left[\begin{matrix}0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\6 & 4 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\25 & 30 & 10 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\90 & 150 & 90 & 20 & 0 & 0 & 0 & 0 & 0 & 0\\301 & 630 & 525 & 210 & 35 & 0 & 0 & 0 & 0 & 0\\966 & 2408 & 2520 & 1400 & 420 & 56 & 0 & 0 & 0 & 0\\3025 & 8694 & 10836 & 7560 & 3150 & 756 & 84 & 0 & 0 & 0\end{matrix}\right]



--------------

.. code:: ipython3

    def h(t):
        return t/(1-t)

.. code:: ipython3

    t = symbols('t')
    h(t)




.. math::

    \frac{t}{- t + 1}



.. code:: ipython3

    h(h(t)).simplify()




.. math::

    \frac{t}{- 2 t + 1}



.. code:: ipython3

    h(h(h(t))).simplify()




.. math::

    - \frac{t}{3 t - 1}



.. code:: ipython3

    h(h(h(h(t))))




.. math::

    \frac{t}{\left(- t + 1\right) \left(- \frac{t}{- t + 1} + 1\right) \left(- \frac{t}{\left(- t + 1\right) \left(- \frac{t}{- t + 1} + 1\right)} + 1\right) \left(- \frac{t}{\left(- t + 1\right) \left(- \frac{t}{- t + 1} + 1\right) \left(- \frac{t}{\left(- t + 1\right) \left(- \frac{t}{- t + 1} + 1\right)} + 1\right)} + 1\right)}



.. code:: ipython3

    def hc(t):
        return (1-sqrt(1-4*t))/(2)

.. code:: ipython3

    hc(t).series(t, n=10)




.. math::

    t + t^{2} + 2 t^{3} + 5 t^{4} + 14 t^{5} + 42 t^{6} + 132 t^{7} + 429 t^{8} + 1430 t^{9} + \mathcal{O}\left(t^{10}\right)



.. code:: ipython3

    (hc(hc(hc(t))))




.. math::

    - \frac{1}{2} \sqrt{2 \sqrt{2 \sqrt{- 4 t + 1} - 1} - 1} + \frac{1}{2}


